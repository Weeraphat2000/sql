SELECT *
FROM table1
JOIN table2 ON table1.id = table2.id;
-- JOIN คือ การเชื่อมโยงข้อมูลระหว่างสองตาราง โดยใช้คอลัมน์ที่มีความสัมพันธ์กัน
-- ในที่นี้จะเชื่อมโยง table1 และ table2 โดยใช้คอลัมน์ id ที่มีความสัมพันธ์กัน
-- ผลลัพธ์จะเป็นข้อมูลที่รวมกัน
-- ของทั้งสองตารางที่มีค่า id ตรงกัน
-- ต้องมี id ที่ตรงกันในทั้งสองตาราง

SELECT *
FROM table1
LEFT JOIN table2 ON table1.id = table2.id;
-- LEFT JOIN คือ การเชื่อมโยงข้อมูลระหว่างสองตาราง โดยจะดึงข้อมูลทั้งหมดจากตารางด้านซ้าย (table1) 
-- และข้อมูลที่ตรงกันจากตารางด้านขวา (table2) 
-- ถ้าไม่มีข้อมูลที่ตรงกันในตารางด้านขวา จะได้ค่า NULL ในคอลัมน์ของตารางด้านขวา
-- ผลลัพธ์จะเป็นข้อมูลทั้งหมดจาก table1 และข้อมูลที่ตรงกันจาก table2
-- ตาราง ซ้าย (table1) จะเป็นหลัก(ถูกแสดงทั้งหมด)

SELECT *
FROM table1
RIGHT JOIN table2 ON table1.id = table2.id;
-- RIGHT JOIN คือ การเชื่อมโยงข้อมูลระหว่างสองตาราง โดยจะดึงข้อมูลทั้งหมดจากตารางด้านขวา (table2) 
-- และข้อมูลที่ตรงกันจากตารางด้านซ้าย (table1) 
-- ถ้าไม่มีข้อมูลที่ตรงกันในตารางด้านซ้าย จะได้ค่า NULL ในคอลัมน์ของตารางด้านซ้าย
-- ผลลัพธ์จะเป็นข้อมูลทั้งหมดจาก table2 และข้อมูลที่ตรงกันจาก table1
-- ตาราง ขวา (table2) จะเป็นหลัก(ถูกแสดงทั้งหมด)

SELECT *
FROM table1
FULL JOIN table2 ON table1.id = table2.id;
-- FULL JOIN คือ การเชื่อมโยงข้อมูลระหว่างสองตาราง โดยจะดึงข้อมูลทั้งหมดจากทั้งสองตาราง 
-- ถ้ามีข้อมูลที่ตรงกันในทั้งสองตาราง จะได้ข้อมูลที่รวมกัน 
-- ถ้าไม่มีข้อมูลที่ตรงกันในตารางใดตารางหนึ่ง จะได้ค่า NULL ในคอลัมน์ของตารางที่ไม่มีข้อมูล
-- ผลลัพธ์จะเป็นข้อมูลทั้งหมดจาก table1 และ table2

SELECT *
FROM table1
INNER JOIN table2 ON table1.id = table2.id;
-- INNER JOIN คือ การเชื่อมโยงข้อมูลระหว่างสองตาราง โดยจะดึงข้อมูลที่มีความสัมพันธ์กันเท่านั้น 
-- จะได้ข้อมูลที่มีค่า id ตรงกันในทั้งสองตาราง
-- ผลลัพธ์จะเป็นข้อมูลที่มีความสัมพันธ์กัน
-- ตารางที่มี id ตรงกันในทั้งสองตาราง
-- inner join == join

SELECT *
FROM table1
CROSS JOIN table2;
-- CROSS JOIN คือ การเชื่อมโยงข้อมูลระหว่างสองตาราง โดยจะได้ข้อมูลทั้งหมดจากทั้งสองตาราง 
-- ผลลัพธ์จะเป็นการรวมข้อมูลทุกแถวจาก table1 กับทุกแถวจาก table2 
-- จะได้ข้อมูลที่เป็น Cartesian product
-- ผลลัพธ์จะเป็นข้อมูลที่รวมกันของทุกแถวจาก table1 กับทุกแถวจาก table2
-- ผลลัพธ์จะมีจำนวนแถวเท่ากับจำนวนแถวใน table1 คูณกับจำนวนแถวใน table2
-- cross join จะไม่มีเงื่อนไขการเชื่อมโยง


-- SUBQUERY
SELECT *
FROM table1
JOIN table2 ON table1.id = table2.id
WHERE table1.age > 30 AND table2.salary < 50000;
-- การใช้ JOIN ร่วมกับ WHERE คือ การเชื่อมโยงข้อมูลระหว่างสองตาราง 
-- โดยจะดึงข้อมูลที่มีความสัมพันธ์กันตามเงื่อนไข
-- ในที่นี้จะเชื่อมโยง table1 และ table2 โดยใช้คอลัมน์ id ที่มีความสัมพันธ์กัน 
-- และกรองข้อมูลที่มีอายุมากกว่า 30 ใน table1 และเงินเดือนน้อยกว่า 50000 ใน table2
-- ผลลัพธ์จะเป็นข้อมูลที่มีความสัมพันธ์กันตามเงื่อนไขที่กำหนด
-- โดยจะได้ข้อมูลที่มีค่า id ตรงกันในทั้งสองตาราง
-- และมีอายุมากกว่า 30 ใน table1 และเงินเดือนน้อยกว่า 50000 ใน table2


SELECT *
FROM table1
JOIN (
    SELECT table2.id as id, table2.salary as salary
    FROM table2
    JOIN table3 ON table2.id = table3.id
    WHERE table2.salary > 30000
) AS subquery ON table1.id = subquery.id;
-- การใช้ JOIN กับ subquery คือ การเชื่อมโยงข้อมูลระหว่างตารางหลัก (table1)
-- กับผลลัพธ์ของ subquery ที่ได้จากการเชื่อมโยงตาราง table2 และ table3
-- ในที่นี้ subquery จะดึงข้อมูล id และ salary
-- จาก table2 ที่มีเงินเดือนมากกว่า 30000 และเชื่อมโยงกับ table3 โดยใช้คอลัมน์ id
-- ผลลัพธ์จะเป็นข้อมูลจาก table1 ที่มีความสัมพันธ์กับผลลัพธ์ของ subquery
-- โดยจะได้ข้อมูลที่มีค่า id ตรงกันในทั้งสองตาราง
-- และมีเงินเดือนมากกว่า 30000 ใน table2
-- subquery จะทำงานก่อน แล้วนำผลลัพธ์มารวมกับ table1 โดยใช้ JOIN
-- โดยใช้คอลัมน์ id ที่มีความสัมพันธ์กัน


SELECT *
FROM table1
WHERE table1.id IN (
    SELECT table2.id
    FROM table2
    WHERE table2.salary > 30000
);
-- การใช้ IN กับ subquery คือ การกรองข้อมูลใน table1 โดยใช้ผลลัพธ์ของ subquery
-- ในที่นี้ subquery จะดึงข้อมูล id จาก table2 ที่มีเงินเดือนมากกว่า 30000
-- ผลลัพธ์จะเป็นข้อมูลจาก table1 ที่มีค่า id ตรงกับผลลัพธ์ของ subquery
-- subquery จะทำงานก่อน แล้วนำผลลัพธ์มารวมกับ table1 โดยใช้ IN